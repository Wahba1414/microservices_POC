version: '2.3'

services:

  manager:
    build:
      # image path.
      context: ./manager
     
      # Need args to pass to Dockerfile. Environment variables accessible only during the build process.
      # args:
      #   - NODE_ENV=development
    
    
    
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    
    #command to override the default command.
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./bin/www

    # Expose ports host:container
    ports:
      - "80:3000"
      - "9229:9229"
      - "9230:9230"


    volumes:
      - ./manager:/opt/node_app/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      # - ./watches/package.json:/opt/node_app/package.json
      # - ./watches/package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules


    # To set the environment variables. unlike the args not visible during the build but during the run. 
    environment:
      - WATCHES_HOST=watches
      - WATCHES_PORT=3000
    #   - NODE_ENV=development
    #   - MONGO_USERNAME=root
    #   - MONGO_PASSWORD=example
    #   - MONGO_HOSTNAME=mongo
    #   - MONGO_PORT=27017
    #   - MONGO_DATABASE_NAME=example-database
    
    # depends_on:
    #   mongo:
    #     condition: service_healthy

    healthcheck:
      disable: true

  

  watches:
    build:
      # image path.
      context: ./watches
      # Image name. unsupported for this version
      # image: watches

      # Need args to pass to Dockerfile. Environment variables accessible only during the build process.
      # args:
      #   - NODE_ENV=development
    
    
    
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    
    #command to override the default command.
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./bin/www

    # Expose ports host:container
    ports:
      # - "27017:3000"
      - "9231:9231"
      - "9232:9232"


    volumes:
      - ./watches:/opt/node_app/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      # - ./watches/package.json:/opt/node_app/package.json
      # - ./watches/package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules


    # To set the environment variables. unlike the args not visible during the build but during the run. 
    environment:
      - NODE_ENV=development
      - MONGO_USERNAME=user
      - MONGO_PASSWORD=password
      - MONGO_HOSTNAME=mongo
      - MONGO_PORT=27017
      - MONGO_DATABASE_NAME=docker-database
    
    depends_on:
      mongo:
        condition: service_healthy

    healthcheck:
      disable: true

  mongo:
    image: mongo
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=docker-database
    healthcheck:
      test: "[ `echo 'db.runCommand(\"ping\").ok' | mongo localhost/docker-database --quiet` ] && echo 0 || echo 1"
      interval: 5s
      start_period: 10s
      timeout: 4s
      retries: 3

# for named volumes. (declare it by name and use it inside services' volumes) 
volumes:
  notused: